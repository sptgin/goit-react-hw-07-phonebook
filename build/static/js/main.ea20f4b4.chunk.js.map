{"version":3,"sources":["redux/actions.js","redux/reducer.js","services/phonebook-api.js","redux/store.js","components/Section.js","components/ContactForm.js","components/Filter.js","components/ContactListItem.js","components/Loader.js","components/ContactsList.js","App.js","index.js"],"names":["setFilter","createAction","filterReducer","createReducer","state","payload","phoneBookApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","getContacts","query","providesTags","result","map","type","id","addContact","mutation","newContact","url","method","body","invalidatesTags","delContact","error","useGetContactsQuery","useAddContactMutation","useDelContactMutation","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","Section","title","children","className","ContactForm","useForm","register","handleSubmit","reset","errors","formState","contacts","data","onSubmit","console","log","some","contact","name","toLowerCase","alert","required","pattern","number","PropsType","func","isRequired","Filter","value","useSelector","filter","dispatch","useDispatch","onChange","event","target","ContactListItem","handleDelContact","phone","onClick","prototype","PropTypes","string","onDeleteContact","SpinnerLoader","color","height","width","timeout","ContactsList","isFetching","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea20f4b4.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\n// export const addContact = createAction('contacts/add');\n// export const delContact = createAction('contacts/del');\nexport const setFilter = createAction('filter/set');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, delContact, setFilter } from './actions';\n\n// const initContact = [];\n\n// const contactReducer = createReducer(initContact, {\n//   [addContact]: (state, { payload }) => {\n//     const checkContact = state.some(\n//       contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\n//     );\n//     if (checkContact) {\n//       alert(`${payload.name} is already exists`);\n//       return state;\n//     } else {\n//       return [...state, payload];\n//     }\n//   },\n//   [delContact]: (state, { payload }) =>\n//     state.filter(contact => contact.id !== payload),\n// });\n\nexport const filterReducer = createReducer('', {\n  [setFilter]: (state, { payload }) => (state = payload),\n});\n\n// const rootReducer = combineReducers({\n//   contacts: contactReducer,\n//   filter: filterReducer,\n// });\n\n// export default rootReducer;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// Define a service using a base URL and expected endpoints\nexport const phoneBookApi = createApi({\n  reducerPath: 'phoneBookApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://619b5e6c2782760017445557.mockapi.io/contacts/',\n  }),\n  tagTypes: ['Contacts'],\n\n  endpoints: build => ({\n    getContacts: build.query({\n      query: () => `contacts`,\n\n      providesTags: result =>\n        // is result available?\n        result\n          ? // successful query\n            [\n              ...result.map(({ id }) => ({ type: 'Contacts', id })),\n              { type: 'Contacts', id: 'LIST' },\n            ]\n          : // an error occurred, but we still want to refetch this query when `{ type: 'Posts', id: 'LIST' }` is invalidated\n            [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    addContact: build.mutation({\n      query: newContact => ({\n        url: 'contacts',\n        method: 'POST',\n        body: newContact,\n      }),\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\n    }),\n    delContact: build.mutation({\n      query: id => ({\n        url: `contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Contacts', id }],\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\n\nexport const {\n  useGetContactsQuery,\n  useDelContactMutation,\n  useAddContactMutation,\n} = phoneBookApi;\n","// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import rootReducer from './reducer';\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n\n// import storage from 'redux-persist/lib/storage';\n\n// const persistConfig = {\n//   key: 'сontacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n// export const store = configureStore({\n//   reducer: persistedReducer,\n//   middleware: getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n// });\n// export const persistor = persistStore(store);\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { filterReducer } from './reducer';\nimport { phoneBookApi } from '../services/phonebook-api';\n\nexport const store = configureStore({\n  reducer: {\n    [phoneBookApi.reducerPath]: phoneBookApi.reducer,\n    filter: filterReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(phoneBookApi.middleware),\n});\n","import React from 'react';\nimport './Section.css';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <div className=\"task__section\">\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropsType from 'prop-types';\nimport { v4 as uuid } from 'uuid';\nimport './ContactForm.css';\nimport { useForm } from 'react-hook-form';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../services/phonebook-api';\nimport { addContact } from '../redux/actions';\nimport { useDispatch } from 'react-redux';\n\nexport default function ContactForm() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  // const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    // dispatch(addContact({ ...data, id: uuid() }));\n    // reset();\n    console.log(contacts);\n\n    const checkContact = contacts.some(\n      contact => contact.name.toLowerCase() === data.name.toLowerCase(),\n    );\n    if (checkContact) {\n      alert(`${data.name} is already exists`);\n      return;\n    } else {\n      addContact(data);\n      reset();\n    }\n  };\n\n  // let nameId = uuid();\n  // let numberId = uuid();\n\n  return (\n    <form className=\"contacts__form\" onSubmit={handleSubmit(onSubmit)}>\n      <label className=\"contcts__form-label\">\n        Name\n        <input\n          className=\"contcts__form-input\"\n          type=\"text\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          {...register('name', {\n            required: true,\n            pattern:\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n          })}\n        />\n        {errors?.name?.type === 'required' && <p>This field is required</p>}\n        {errors?.name?.type === 'pattern' && (\n          <p>Alphabetical characters only</p>\n        )}\n      </label>\n      <label className=\"contcts__form-label\">\n        Number\n        <input\n          className=\"contcts__form-input\"\n          type=\"tel\"\n          {...register('phone', {\n            required: true,\n            pattern:\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n          })}\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        />\n        {errors?.number?.type === 'required' && <p>This field is required</p>}\n        {errors?.number?.type === 'pattern' && <p>Numeric characters only</p>}\n      </label>\n      <button className=\"contacts__form-button\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n","import React from 'react';\nimport './Filter.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/actions';\n\nexport default function Filter() {\n  const value = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <h3 className=\"filter__header\">Find contacts by name :</h3>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        className=\"filter__input\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport './ContactListItem.css';\n\nexport default function ContactListItem({ contact, handleDelContact }) {\n  return (\n    <li className=\"contact__list-item\">\n      <div>\n        {contact.name}: {contact.phone}\n      </div>\n      <button\n        className=\"contact__list-delete-button\"\n        type=\"submit\"\n        id={contact.id}\n        onClick={handleDelContact}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactListItem.prototype = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import Loader from 'react-loader-spinner';\nimport './Loader.css';\n\nfunction SpinnerLoader() {\n  return (\n    <Loader\n      className=\"SpinnerLoader\"\n      type=\"Watch\"\n      color=\"#808080\"\n      height={100}\n      width={100}\n      timeout={3000} //3 secs\n    />\n  );\n}\n\nexport default SpinnerLoader;\n","import ContactListItem from './ContactListItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { delContact } from '../redux/actions';\nimport { useGetContactsQuery } from '../services/phonebook-api';\nimport Loader from '../components/Loader';\nimport './ContactsList.css';\n\nexport default function ContactsList() {\n  // const contacts = useSelector(state =>\n  //   state.contacts.filter(contact =>\n  //     contact.name.toLocaleLowerCase().includes(state.filter.toLowerCase()),\n  //   ),\n  // );\n  const filter = useSelector(state => state.filter);\n\n  const { data, isFetching } = useGetContactsQuery();\n\n  console.log(data);\n\n  //const dispatch = useDispatch();\n  return (\n    <div>\n      {isFetching && <Loader />}\n      {data && !isFetching && (\n        <ul className=\"contact__list\">\n          {data.map(contact => {\n            return (\n              <ContactListItem\n                className=\"contacts__list-item\"\n                key={contact.id}\n                contact={contact}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n}\n\n{\n  /* <>\n  {data && !isFetching && (\n    <ul>\n      {data\n        .filter(contact =>\n          contact.name.toLocaleLowerCase().includes(filter.toLowerCase()),\n        )\n        .map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n    </ul>\n  )}\n</>; */\n}\n","import Section from './components/Section';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactsList from './components/ContactsList';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div>\n      <h1 className=\"header__main\">React HW 007 Phonebook</h1>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate persistor={persistor} loading={null}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}